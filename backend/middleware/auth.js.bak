const jwt = require('jsonwebtoken');
const config = require('../config/config');
const { logger } = require('../utils/logger');

// 인증 미들웨어
exports.authenticate = (req, res, next) => {
  try {
    // Authorization 헤더 확인
    const authHeader = req.headers.authorization;
    
    if (!authHeader) {
      return res.status(401).json({ message: '인증이 필요합니다.' });
    }
    
    // Bearer 토큰 형식 확인
    const parts = authHeader.split(' ');
    if (parts.length !== 2 || parts[0] !== 'Bearer') {
      return res.status(401).json({ message: '유효하지 않은 인증 형식입니다.' });
    }
    
    const token = parts[1];
    
    // 토큰 검증
    jwt.verify(token, config.app.jwtSecret, (err, decoded) => {
      if (err) {
        if (err.name === 'TokenExpiredError') {
          return res.status(401).json({ message: '인증이 만료되었습니다. 다시 로그인해주세요.' });
        }
        
        return res.status(401).json({ message: '유효하지 않은 인증 토큰입니다.' });
      }
      
      // 사용자 정보를 요청 객체에 저장
      req.user = decoded;
      next();
    });
  } catch (error) {
    logger.error('인증 오류:', error);
    res.status(500).json({ message: '인증 처리 중 오류가 발생했습니다.' });
  }
};

// 관리자 권한 확인 미들웨어
exports.isAdmin = (req, res, next) => {
  if (req.user.role !== 'ADMIN') {
    return res.status(403).json({ message: '관리자 권한이 필요합니다.' });
  }
  
  next();
};
